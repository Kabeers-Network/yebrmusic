#!/usr/bin/env node

/**
 * Module dependencies.
 */

require("dotenv").config({
  path: process.env.NODE_ENV === "production" ? ".env" : "dev.env"
});
const app = require("../app"),
    debug = require("debug")("backend:server"),
    http = require("http");
/**
 * Get port from environment and store in Express.
 **/
/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = (val) => {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

const onError = async (error) => {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = async () => {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

const port = normalizePort(process.env.PORT || "9000");
app.set("port", port);
/**
 * Create HTTP server.
 */

const server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, process.env.HOST || "0.0.0.0", () => console.log(`Backend Server Running on 0.0.0.0:${port}`));
server.on("error", onError);
server.on("listening", onListening);
